#include "eventail_simulation/polyjam_solver.hpp"

namespace eventail_simulation {

PolyjamSolver::PolyjamSolver(const Matrix3d& K, const Matrix3d& K_inv, const ErrorMetric& metric_type,
                             const ErrorModel& model_type)
    : K_(K), K_inv_(K_inv), error_metric_type_(metric_type), error_model_type_(model_type) {
  reset();
}

void PolyjamSolver::inputGroundTruth(const Position& Pa, const Position& Pb, const Velocity& vc) {
  if (abs(Pa.x() + 1.0) > EPSILON6 || abs(Pb.x() - 1.0) > EPSILON6)
    EVENTAIL_WARN("The input ground truth does not match the two-point-two-plane parametrization!");

  Pa_gt_ = Pa;
  Pb_gt_ = Pb;
  vc_gt_ = vc;
  e1_gt_ = Pb_gt_ - Pa_gt_;
  e2_gt_ = Pb_gt_.cross(Pa_gt_);
  e3_gt_ = e1_gt_.cross(e2_gt_);
  Rcl_orthogonal_gt_.col(0) = e1_gt_;
  Rcl_orthogonal_gt_.col(1) = e2_gt_;
  Rcl_orthogonal_gt_.col(2) = e3_gt_;
  Rcl_orthonormal_gt_ = turnRotationMatrixOrthonormal(Rcl_orthogonal_gt_);
  vl_gt_ = Rcl_orthonormal_gt_.transpose() * vc_gt_;
  vl_gt_[0] = 0.0;  // ! the unobservable component due to aperture problem
  vc_gt_partial_ = Rcl_orthonormal_gt_ * vl_gt_;
}

void PolyjamSolver::reset() {
  success_ = false;
  vy_est_ = std::numeric_limits<double>::quiet_NaN();
  vz_est_ = std::numeric_limits<double>::quiet_NaN();
  ya_est_ = std::numeric_limits<double>::quiet_NaN();
  za_est_ = std::numeric_limits<double>::quiet_NaN();
  zb_est_ = std::numeric_limits<double>::quiet_NaN();
  yb_est_ = std::numeric_limits<double>::quiet_NaN();
  Pa_est_.setZero();
  Pb_est_.setZero();
  vl_est_.setZero();
  norm_vc_est_.setZero();
  e1_est_.setZero();
  e2_est_.setZero();
  e3_est_.setZero();
  Rcl_orthogonal_est_.setZero();
  cov_ = CovarianceMatrix::Zero(6, 6);
}

RotationMatrix PolyjamSolver::preRotation(const Measurements& measurements) {
  FiveEventMatrix data;
  for (int idx = 0; idx < measurements.first.size(); ++idx) {
    Eventd e = measurements.first[idx];
    Vector3d event_homo(e.x, e.y, 1.0);
    Vector3d unrotated_event_homo = K_ * axisAngleToRotationMatrix(measurements.second, e.t) * K_inv_ * event_homo;
    data(0, idx) = unrotated_event_homo.x() / unrotated_event_homo.z();
    data(1, idx) = unrotated_event_homo.y() / unrotated_event_homo.z();
  }
  FiveEventMatrix mean_data = data.colwise() - data.rowwise().mean();
  Eigen::JacobiSVD<Matrix2d> svd(mean_data * mean_data.transpose(), Eigen::ComputeFullV);
  RotationMatrix R = RotationMatrix::Identity();
  R.block<2, 2>(0, 0) = svd.matrixV();
  // ! make sure the Rotation Matrix follows the right hand rule
  if (abs(svd.matrixV().determinant() - 1) > EPSILON6) {
    R(0, 0) = -R(0, 0);
    R(1, 0) = -R(1, 0);
  }
  return R;
}

// * automatically generate by polyjam
void PolyjamSolver::initRow(Eigen::MatrixXd& M2, const Eigen::MatrixXd& M1, int row2, int row1, const int* cols2,
                            const int* cols1, size_t numberCols) {
  for (int i = 0; i < numberCols; i++) M2(row2, cols2[i]) = M1(row1, cols1[i]);
}

// * automatically generate by polyjam
bool PolyjamSolver::polyjamSolve(const std::vector<Bearing>& fs, const std::vector<double>& ts) {
  Eigen::MatrixXd M1(6, 105);
  M1.fill(0.0);
  M1(0, 0) = 1;
  M1(0, 1) = 1;
  M1(0, 2) = -2;
  M1(0, 3) = 1;
  M1(0, 4) = -2;
  M1(0, 5) = -2;
  M1(0, 6) = -2;
  M1(0, 7) = 4;
  M1(0, 8) = -2;
  M1(0, 9) = 1;
  M1(0, 10) = 1;
  M1(0, 11) = 4;
  M1(0, 12) = -2;
  M1(0, 13) = 1;
  M1(0, 14) = 1;
  M1(0, 15) = -2;
  M1(0, 16) = -2;
  M1(0, 17) = 1;
  M1(0, 18) = 1;
  M1(0, 19) = 2;
  M1(0, 20) = 1;
  M1(0, 21) = 1;
  M1(0, 22) = 6;
  M1(0, 23) = -2;
  M1(0, 24) = 1;
  M1(0, 25) = -2;
  M1(0, 26) = -16;
  M1(0, 27) = -2;
  M1(0, 28) = 1;
  M1(0, 29) = 6;
  M1(0, 30) = 2;
  M1(0, 31) = 1;
  M1(0, 44) = 1;
  M1(0, 45) = 4;
  M1(0, 48) = 1;
  M1(0, 49) = 4;
  M1(0, 54) = 2;
  M1(0, 55) = 8;
  M1(0, 59) = 1;
  M1(0, 60) = 4;
  M1(0, 65) = 2;
  M1(0, 66) = 8;
  M1(0, 77) = 1;
  M1(0, 78) = 4;
  M1(0, 104) = -1;
  M1(1, 32) = ts[0] * fs[0][0];
  M1(1, 33) = ts[0] * fs[0][0];
  M1(1, 34) = -2 * ts[0] * fs[0][0];
  M1(1, 35) = ts[0] * fs[0][0];
  M1(1, 36) = -ts[0] * fs[0][0];
  M1(1, 37) = -ts[0] * fs[0][0];
  M1(1, 38) = -2 * ts[0] * fs[0][0];
  M1(1, 39) = 2 * ts[0] * fs[0][0];
  M1(1, 40) = -ts[0] * fs[0][0];
  M1(1, 41) = 2 * ts[0] * fs[0][0];
  M1(1, 42) = ts[0] * fs[0][0];
  M1(1, 43) = -ts[0] * fs[0][0];
  M1(1, 46) = -ts[0] * fs[0][2];
  M1(1, 47) = ts[0] * fs[0][1];
  M1(1, 50) = -ts[0] * fs[0][2];
  M1(1, 51) = ts[0] * fs[0][1];
  M1(1, 52) = -ts[0] * fs[0][2];
  M1(1, 53) = ts[0] * fs[0][1];
  M1(1, 56) = ts[0] * fs[0][1];
  M1(1, 57) = 2 * ts[0] * fs[0][2];
  M1(1, 58) = -ts[0] * fs[0][1];
  M1(1, 61) = -ts[0] * fs[0][1];
  M1(1, 62) = -ts[0] * fs[0][2];
  M1(1, 63) = -ts[0] * fs[0][1];
  M1(1, 64) = ts[0] * fs[0][1];
  M1(1, 67) = ts[0] * fs[0][2];
  M1(1, 68) = ts[0] * fs[0][2];
  M1(1, 69) = -2 * ts[0] * fs[0][1];
  M1(1, 70) = -ts[0] * fs[0][1];
  M1(1, 71) = -ts[0] * fs[0][2];
  M1(1, 72) = ts[0] * fs[0][2];
  M1(1, 73) = -2 * ts[0] * fs[0][1];
  M1(1, 74) = ts[0] * fs[0][1];
  M1(1, 75) = 2 * ts[0] * fs[0][2];
  M1(1, 76) = -ts[0] * fs[0][2];
  M1(1, 79) = ts[0] * fs[0][2];
  M1(1, 80) = -ts[0] * fs[0][2];
  M1(1, 81) = ts[0] * fs[0][1];
  M1(1, 82) = ts[0] * fs[0][1];
  M1(1, 83) = -ts[0] * fs[0][2];
  M1(1, 84) = -ts[0] * fs[0][0];
  M1(1, 85) = -ts[0] * fs[0][0];
  M1(1, 86) = 4 * ts[0] * fs[0][0];
  M1(1, 87) = ts[0] * fs[0][0];
  M1(1, 88) = -4 * ts[0] * fs[0][0];
  M1(1, 89) = ts[0] * fs[0][0];
  M1(1, 90) = -2 * ts[0] * fs[0][1];
  M1(1, 91) = -4 * ts[0] * fs[0][2];
  M1(1, 92) = -2 * ts[0] * fs[0][2];
  M1(1, 93) = 4 * ts[0] * fs[0][1];
  M1(1, 94) = -2 * ts[0] * fs[0][2];
  M1(1, 95) = 4 * ts[0] * fs[0][1];
  M1(1, 96) = fs[0][0];
  M1(1, 97) = -2 * ts[0] * fs[0][1];
  M1(1, 98) = -4 * ts[0] * fs[0][2];
  M1(1, 99) = -fs[0][0];
  M1(1, 100) = -fs[0][2];
  M1(1, 101) = fs[0][1];
  M1(1, 102) = fs[0][1];
  M1(1, 103) = -fs[0][2];
  M1(2, 32) = ts[1] * fs[1][0];
  M1(2, 33) = ts[1] * fs[1][0];
  M1(2, 34) = -2 * ts[1] * fs[1][0];
  M1(2, 35) = ts[1] * fs[1][0];
  M1(2, 36) = -ts[1] * fs[1][0];
  M1(2, 37) = -ts[1] * fs[1][0];
  M1(2, 38) = -2 * ts[1] * fs[1][0];
  M1(2, 39) = 2 * ts[1] * fs[1][0];
  M1(2, 40) = -ts[1] * fs[1][0];
  M1(2, 41) = 2 * ts[1] * fs[1][0];
  M1(2, 42) = ts[1] * fs[1][0];
  M1(2, 43) = -ts[1] * fs[1][0];
  M1(2, 46) = -ts[1] * fs[1][2];
  M1(2, 47) = ts[1] * fs[1][1];
  M1(2, 50) = -ts[1] * fs[1][2];
  M1(2, 51) = ts[1] * fs[1][1];
  M1(2, 52) = -ts[1] * fs[1][2];
  M1(2, 53) = ts[1] * fs[1][1];
  M1(2, 56) = ts[1] * fs[1][1];
  M1(2, 57) = 2 * ts[1] * fs[1][2];
  M1(2, 58) = -ts[1] * fs[1][1];
  M1(2, 61) = -ts[1] * fs[1][1];
  M1(2, 62) = -ts[1] * fs[1][2];
  M1(2, 63) = -ts[1] * fs[1][1];
  M1(2, 64) = ts[1] * fs[1][1];
  M1(2, 67) = ts[1] * fs[1][2];
  M1(2, 68) = ts[1] * fs[1][2];
  M1(2, 69) = -2 * ts[1] * fs[1][1];
  M1(2, 70) = -ts[1] * fs[1][1];
  M1(2, 71) = -ts[1] * fs[1][2];
  M1(2, 72) = ts[1] * fs[1][2];
  M1(2, 73) = -2 * ts[1] * fs[1][1];
  M1(2, 74) = ts[1] * fs[1][1];
  M1(2, 75) = 2 * ts[1] * fs[1][2];
  M1(2, 76) = -ts[1] * fs[1][2];
  M1(2, 79) = ts[1] * fs[1][2];
  M1(2, 80) = -ts[1] * fs[1][2];
  M1(2, 81) = ts[1] * fs[1][1];
  M1(2, 82) = ts[1] * fs[1][1];
  M1(2, 83) = -ts[1] * fs[1][2];
  M1(2, 84) = -ts[1] * fs[1][0];
  M1(2, 85) = -ts[1] * fs[1][0];
  M1(2, 86) = 4 * ts[1] * fs[1][0];
  M1(2, 87) = ts[1] * fs[1][0];
  M1(2, 88) = -4 * ts[1] * fs[1][0];
  M1(2, 89) = ts[1] * fs[1][0];
  M1(2, 90) = -2 * ts[1] * fs[1][1];
  M1(2, 91) = -4 * ts[1] * fs[1][2];
  M1(2, 92) = -2 * ts[1] * fs[1][2];
  M1(2, 93) = 4 * ts[1] * fs[1][1];
  M1(2, 94) = -2 * ts[1] * fs[1][2];
  M1(2, 95) = 4 * ts[1] * fs[1][1];
  M1(2, 96) = fs[1][0];
  M1(2, 97) = -2 * ts[1] * fs[1][1];
  M1(2, 98) = -4 * ts[1] * fs[1][2];
  M1(2, 99) = -fs[1][0];
  M1(2, 100) = -fs[1][2];
  M1(2, 101) = fs[1][1];
  M1(2, 102) = fs[1][1];
  M1(2, 103) = -fs[1][2];
  M1(3, 32) = ts[2] * fs[2][0];
  M1(3, 33) = ts[2] * fs[2][0];
  M1(3, 34) = -2 * ts[2] * fs[2][0];
  M1(3, 35) = ts[2] * fs[2][0];
  M1(3, 36) = -ts[2] * fs[2][0];
  M1(3, 37) = -ts[2] * fs[2][0];
  M1(3, 38) = -2 * ts[2] * fs[2][0];
  M1(3, 39) = 2 * ts[2] * fs[2][0];
  M1(3, 40) = -ts[2] * fs[2][0];
  M1(3, 41) = 2 * ts[2] * fs[2][0];
  M1(3, 42) = ts[2] * fs[2][0];
  M1(3, 43) = -ts[2] * fs[2][0];
  M1(3, 46) = -ts[2] * fs[2][2];
  M1(3, 47) = ts[2] * fs[2][1];
  M1(3, 50) = -ts[2] * fs[2][2];
  M1(3, 51) = ts[2] * fs[2][1];
  M1(3, 52) = -ts[2] * fs[2][2];
  M1(3, 53) = ts[2] * fs[2][1];
  M1(3, 56) = ts[2] * fs[2][1];
  M1(3, 57) = 2 * ts[2] * fs[2][2];
  M1(3, 58) = -ts[2] * fs[2][1];
  M1(3, 61) = -ts[2] * fs[2][1];
  M1(3, 62) = -ts[2] * fs[2][2];
  M1(3, 63) = -ts[2] * fs[2][1];
  M1(3, 64) = ts[2] * fs[2][1];
  M1(3, 67) = ts[2] * fs[2][2];
  M1(3, 68) = ts[2] * fs[2][2];
  M1(3, 69) = -2 * ts[2] * fs[2][1];
  M1(3, 70) = -ts[2] * fs[2][1];
  M1(3, 71) = -ts[2] * fs[2][2];
  M1(3, 72) = ts[2] * fs[2][2];
  M1(3, 73) = -2 * ts[2] * fs[2][1];
  M1(3, 74) = ts[2] * fs[2][1];
  M1(3, 75) = 2 * ts[2] * fs[2][2];
  M1(3, 76) = -ts[2] * fs[2][2];
  M1(3, 79) = ts[2] * fs[2][2];
  M1(3, 80) = -ts[2] * fs[2][2];
  M1(3, 81) = ts[2] * fs[2][1];
  M1(3, 82) = ts[2] * fs[2][1];
  M1(3, 83) = -ts[2] * fs[2][2];
  M1(3, 84) = -ts[2] * fs[2][0];
  M1(3, 85) = -ts[2] * fs[2][0];
  M1(3, 86) = 4 * ts[2] * fs[2][0];
  M1(3, 87) = ts[2] * fs[2][0];
  M1(3, 88) = -4 * ts[2] * fs[2][0];
  M1(3, 89) = ts[2] * fs[2][0];
  M1(3, 90) = -2 * ts[2] * fs[2][1];
  M1(3, 91) = -4 * ts[2] * fs[2][2];
  M1(3, 92) = -2 * ts[2] * fs[2][2];
  M1(3, 93) = 4 * ts[2] * fs[2][1];
  M1(3, 94) = -2 * ts[2] * fs[2][2];
  M1(3, 95) = 4 * ts[2] * fs[2][1];
  M1(3, 96) = fs[2][0];
  M1(3, 97) = -2 * ts[2] * fs[2][1];
  M1(3, 98) = -4 * ts[2] * fs[2][2];
  M1(3, 99) = -fs[2][0];
  M1(3, 100) = -fs[2][2];
  M1(3, 101) = fs[2][1];
  M1(3, 102) = fs[2][1];
  M1(3, 103) = -fs[2][2];
  M1(4, 32) = ts[3] * fs[3][0];
  M1(4, 33) = ts[3] * fs[3][0];
  M1(4, 34) = -2 * ts[3] * fs[3][0];
  M1(4, 35) = ts[3] * fs[3][0];
  M1(4, 36) = -ts[3] * fs[3][0];
  M1(4, 37) = -ts[3] * fs[3][0];
  M1(4, 38) = -2 * ts[3] * fs[3][0];
  M1(4, 39) = 2 * ts[3] * fs[3][0];
  M1(4, 40) = -ts[3] * fs[3][0];
  M1(4, 41) = 2 * ts[3] * fs[3][0];
  M1(4, 42) = ts[3] * fs[3][0];
  M1(4, 43) = -ts[3] * fs[3][0];
  M1(4, 46) = -ts[3] * fs[3][2];
  M1(4, 47) = ts[3] * fs[3][1];
  M1(4, 50) = -ts[3] * fs[3][2];
  M1(4, 51) = ts[3] * fs[3][1];
  M1(4, 52) = -ts[3] * fs[3][2];
  M1(4, 53) = ts[3] * fs[3][1];
  M1(4, 56) = ts[3] * fs[3][1];
  M1(4, 57) = 2 * ts[3] * fs[3][2];
  M1(4, 58) = -ts[3] * fs[3][1];
  M1(4, 61) = -ts[3] * fs[3][1];
  M1(4, 62) = -ts[3] * fs[3][2];
  M1(4, 63) = -ts[3] * fs[3][1];
  M1(4, 64) = ts[3] * fs[3][1];
  M1(4, 67) = ts[3] * fs[3][2];
  M1(4, 68) = ts[3] * fs[3][2];
  M1(4, 69) = -2 * ts[3] * fs[3][1];
  M1(4, 70) = -ts[3] * fs[3][1];
  M1(4, 71) = -ts[3] * fs[3][2];
  M1(4, 72) = ts[3] * fs[3][2];
  M1(4, 73) = -2 * ts[3] * fs[3][1];
  M1(4, 74) = ts[3] * fs[3][1];
  M1(4, 75) = 2 * ts[3] * fs[3][2];
  M1(4, 76) = -ts[3] * fs[3][2];
  M1(4, 79) = ts[3] * fs[3][2];
  M1(4, 80) = -ts[3] * fs[3][2];
  M1(4, 81) = ts[3] * fs[3][1];
  M1(4, 82) = ts[3] * fs[3][1];
  M1(4, 83) = -ts[3] * fs[3][2];
  M1(4, 84) = -ts[3] * fs[3][0];
  M1(4, 85) = -ts[3] * fs[3][0];
  M1(4, 86) = 4 * ts[3] * fs[3][0];
  M1(4, 87) = ts[3] * fs[3][0];
  M1(4, 88) = -4 * ts[3] * fs[3][0];
  M1(4, 89) = ts[3] * fs[3][0];
  M1(4, 90) = -2 * ts[3] * fs[3][1];
  M1(4, 91) = -4 * ts[3] * fs[3][2];
  M1(4, 92) = -2 * ts[3] * fs[3][2];
  M1(4, 93) = 4 * ts[3] * fs[3][1];
  M1(4, 94) = -2 * ts[3] * fs[3][2];
  M1(4, 95) = 4 * ts[3] * fs[3][1];
  M1(4, 96) = fs[3][0];
  M1(4, 97) = -2 * ts[3] * fs[3][1];
  M1(4, 98) = -4 * ts[3] * fs[3][2];
  M1(4, 99) = -fs[3][0];
  M1(4, 100) = -fs[3][2];
  M1(4, 101) = fs[3][1];
  M1(4, 102) = fs[3][1];
  M1(4, 103) = -fs[3][2];
  M1(5, 32) = ts[4] * fs[4][0];
  M1(5, 33) = ts[4] * fs[4][0];
  M1(5, 34) = -2 * ts[4] * fs[4][0];
  M1(5, 35) = ts[4] * fs[4][0];
  M1(5, 36) = -ts[4] * fs[4][0];
  M1(5, 37) = -ts[4] * fs[4][0];
  M1(5, 38) = -2 * ts[4] * fs[4][0];
  M1(5, 39) = 2 * ts[4] * fs[4][0];
  M1(5, 40) = -ts[4] * fs[4][0];
  M1(5, 41) = 2 * ts[4] * fs[4][0];
  M1(5, 42) = ts[4] * fs[4][0];
  M1(5, 43) = -ts[4] * fs[4][0];
  M1(5, 46) = -ts[4] * fs[4][2];
  M1(5, 47) = ts[4] * fs[4][1];
  M1(5, 50) = -ts[4] * fs[4][2];
  M1(5, 51) = ts[4] * fs[4][1];
  M1(5, 52) = -ts[4] * fs[4][2];
  M1(5, 53) = ts[4] * fs[4][1];
  M1(5, 56) = ts[4] * fs[4][1];
  M1(5, 57) = 2 * ts[4] * fs[4][2];
  M1(5, 58) = -ts[4] * fs[4][1];
  M1(5, 61) = -ts[4] * fs[4][1];
  M1(5, 62) = -ts[4] * fs[4][2];
  M1(5, 63) = -ts[4] * fs[4][1];
  M1(5, 64) = ts[4] * fs[4][1];
  M1(5, 67) = ts[4] * fs[4][2];
  M1(5, 68) = ts[4] * fs[4][2];
  M1(5, 69) = -2 * ts[4] * fs[4][1];
  M1(5, 70) = -ts[4] * fs[4][1];
  M1(5, 71) = -ts[4] * fs[4][2];
  M1(5, 72) = ts[4] * fs[4][2];
  M1(5, 73) = -2 * ts[4] * fs[4][1];
  M1(5, 74) = ts[4] * fs[4][1];
  M1(5, 75) = 2 * ts[4] * fs[4][2];
  M1(5, 76) = -ts[4] * fs[4][2];
  M1(5, 79) = ts[4] * fs[4][2];
  M1(5, 80) = -ts[4] * fs[4][2];
  M1(5, 81) = ts[4] * fs[4][1];
  M1(5, 82) = ts[4] * fs[4][1];
  M1(5, 83) = -ts[4] * fs[4][2];
  M1(5, 84) = -ts[4] * fs[4][0];
  M1(5, 85) = -ts[4] * fs[4][0];
  M1(5, 86) = 4 * ts[4] * fs[4][0];
  M1(5, 87) = ts[4] * fs[4][0];
  M1(5, 88) = -4 * ts[4] * fs[4][0];
  M1(5, 89) = ts[4] * fs[4][0];
  M1(5, 90) = -2 * ts[4] * fs[4][1];
  M1(5, 91) = -4 * ts[4] * fs[4][2];
  M1(5, 92) = -2 * ts[4] * fs[4][2];
  M1(5, 93) = 4 * ts[4] * fs[4][1];
  M1(5, 94) = -2 * ts[4] * fs[4][2];
  M1(5, 95) = 4 * ts[4] * fs[4][1];
  M1(5, 96) = fs[4][0];
  M1(5, 97) = -2 * ts[4] * fs[4][1];
  M1(5, 98) = -4 * ts[4] * fs[4][2];
  M1(5, 99) = -fs[4][0];
  M1(5, 100) = -fs[4][2];
  M1(5, 101) = fs[4][1];
  M1(5, 102) = fs[4][1];
  M1(5, 103) = -fs[4][2];

  M1.row(0) /= M1(0, 0);
  M1.row(1) /= M1(1, 32);
  M1.row(2) -= M1(2, 32) * M1.row(1);
  M1.row(3) -= M1(3, 32) * M1.row(1);
  M1.row(4) -= M1(4, 32) * M1.row(1);
  M1.row(5) -= M1(5, 32) * M1.row(1);
  M1.row(2) /= M1(2, 46);
  M1.row(3) -= M1(3, 46) * M1.row(2);
  M1.row(4) -= M1(4, 46) * M1.row(2);
  M1.row(5) -= M1(5, 46) * M1.row(2);
  M1.row(3) /= M1(3, 47);
  M1.row(4) -= M1(4, 47) * M1.row(3);
  M1.row(5) -= M1(5, 47) * M1.row(3);
  M1.row(4) /= M1(4, 96);
  M1.row(5) -= M1(5, 96) * M1.row(4);
  M1.row(5) /= M1(5, 100);
  M1.row(4) -= M1(4, 100) * M1.row(5);
  M1.row(3) -= M1(3, 100) * M1.row(5);
  M1.row(2) -= M1(2, 100) * M1.row(5);
  M1.row(1) -= M1(1, 100) * M1.row(5);
  M1.row(3) -= M1(3, 96) * M1.row(4);
  M1.row(2) -= M1(2, 96) * M1.row(4);
  M1.row(1) -= M1(1, 96) * M1.row(4);
  M1.row(2) -= M1(2, 47) * M1.row(3);
  M1.row(1) -= M1(1, 47) * M1.row(3);
  M1.row(1) -= M1(1, 46) * M1.row(2);

  Eigen::MatrixXd M2(154, 578);
  M2.fill(0.0);
  static const int ind_2_0[] = {0,   3,   18,  25,  30,  36,  72,  76,  154, 156,
                                158, 161, 163, 164, 167, 174, 178, 186, 236, 285};
  static const int ind_1_0[] = {32, 36, 84, 86, 87, 88, 101, 102, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 85, 89};
  initRow(M2, M1, 0, 1, ind_2_0, ind_1_0, 20);
  static const int ind_2_1[] = {0,   3,   12,  16,  23,  25,  36,  65,  68,  71,  74,  79,  142, 154, 156,
                                158, 161, 163, 164, 167, 170, 172, 174, 176, 178, 180, 184, 186, 189, 232,
                                241, 248, 258, 276, 279, 281, 295, 310, 394, 397, 404, 410, 420, 448, 450};
  static const int ind_1_1[] = {0,  4,  18, 19, 21, 22, 26, 45, 49, 55, 59, 66, 104, 1,  2,
                                3,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,  17, 20,
                                23, 24, 25, 27, 28, 29, 30, 31, 44, 48, 54, 60, 65,  77, 78};
  initRow(M2, M1, 1, 0, ind_2_1, ind_1_1, 45);
  static const int ind_2_2[] = {1,   4,   5,   20,  27,  73,  77,  155, 157, 159,
                                162, 165, 168, 175, 179, 187, 237, 244, 262, 288};
  static const int ind_1_2[] = {32, 36, 38, 84, 86, 101, 102, 33, 34, 35, 37, 39, 40, 41, 42, 43, 85, 87, 88, 89};
  initRow(M2, M1, 2, 1, ind_2_2, ind_1_2, 20);
  static const int ind_2_3[] = {1,   4,   5,   14,  17,  26,  27,  67,  81,  144, 155, 157, 159, 162, 165,
                                168, 171, 173, 175, 177, 179, 181, 185, 187, 190, 233, 242, 249, 260, 262,
                                278, 282, 283, 297, 311, 396, 399, 401, 406, 408, 411, 413, 422, 451, 453};
  static const int ind_1_3[] = {0,  4,  6,  18, 19, 21, 22, 45, 66, 104, 1,  2,  3,  5,  7,
                                8,  9,  10, 11, 12, 13, 14, 15, 16, 17,  20, 23, 24, 25, 26,
                                27, 28, 29, 30, 31, 44, 48, 49, 54, 55,  59, 60, 65, 77, 78};
  initRow(M2, M1, 3, 0, ind_2_3, ind_1_3, 45);
  static const int ind_2_4[] = {2,   5,   24,  28,  77,  78,  157, 159, 160, 165,
                                166, 168, 169, 179, 182, 188, 243, 247, 268, 294};
  static const int ind_1_4[] = {32, 36, 84, 85, 101, 102, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 86, 87, 88, 89};
  initRow(M2, M1, 4, 1, ind_2_4, ind_1_4, 20);
  static const int ind_2_5[] = {2,   5,   19,  22,  29,  70,  146, 157, 159, 160, 165, 166, 168, 169, 175,
                                177, 179, 181, 182, 183, 187, 188, 191, 239, 243, 246, 250, 266, 268, 286,
                                290, 292, 299, 313, 403, 406, 408, 411, 413, 415, 417, 430, 432, 457, 459};
  static const int ind_1_5[] = {0,  4,  18, 19, 21, 45, 104, 1,  2,  3,  5,  6,  7,  8,  9,
                                10, 11, 12, 13, 14, 15, 16,  17, 20, 22, 23, 24, 25, 26, 27,
                                28, 29, 30, 31, 44, 48, 49,  54, 55, 59, 60, 65, 66, 77, 78};
  initRow(M2, M1, 5, 0, ind_2_5, ind_1_5, 45);
  static const int ind_2_6[] = {3,   32,  36,  161, 164, 167, 170, 172, 174, 176,
                                180, 184, 186, 189, 254, 267, 281, 301, 426, 436};
  static const int ind_1_6[] = {32, 84, 86, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 85, 87, 88, 89, 101, 102};
  initRow(M2, M1, 6, 1, ind_2_6, ind_1_6, 20);
  static const int ind_2_7[] = {4,   34,  162, 165, 168, 171, 173, 175, 177, 181,
                                185, 187, 190, 256, 262, 269, 283, 303, 429, 439};
  static const int ind_1_7[] = {32, 84, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 85, 86, 87, 88, 89, 101, 102};
  initRow(M2, M1, 7, 1, ind_2_7, ind_1_7, 20);
  static const int ind_2_8[] = {5,   165, 168, 169, 175, 177, 179, 181, 183, 187,
                                188, 191, 259, 263, 268, 273, 292, 307, 439, 445};
  static const int ind_1_8[] = {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 101, 102};
  initRow(M2, M1, 8, 1, ind_2_8, ind_1_8, 20);
  static const int ind_2_9[] = {6,   9,   45,  52,  57,  63,  91,  95,  192, 194,
                                196, 199, 201, 202, 205, 212, 216, 224, 320, 369};
  static const int ind_1_9[] = {32, 36, 84, 86, 87, 88, 101, 102, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 85, 89};
  initRow(M2, M1, 9, 1, ind_2_9, ind_1_9, 20);
  static const int ind_2_10[] = {6,   9,   39,  43,  50,  52,  63,  151, 192, 194, 196, 199, 201, 202, 205,
                                 208, 210, 212, 214, 216, 218, 222, 224, 227, 316, 325, 332, 342, 361, 364,
                                 366, 378, 391, 470, 472, 476, 478, 484, 486, 490, 492, 500, 502, 519, 521};
  static const int ind_1_10[] = {0,  4,  18, 19, 21, 22, 26, 104, 1,  2,  3,  5,  6,  7,  8,
                                 9,  10, 11, 12, 13, 14, 15, 16,  17, 20, 23, 24, 25, 27, 28,
                                 29, 30, 31, 44, 45, 48, 49, 54,  55, 59, 60, 65, 66, 77, 78};
  initRow(M2, M1, 10, 0, ind_2_10, ind_1_10, 45);
  static const int ind_2_11[] = {7,   10,  11,  47,  54,  93,  96,  193, 195, 197,
                                 200, 203, 206, 213, 217, 225, 321, 328, 346, 372};
  static const int ind_1_11[] = {32, 36, 38, 84, 86, 101, 102, 33, 34, 35, 37, 39, 40, 41, 42, 43, 85, 87, 88, 89};
  initRow(M2, M1, 11, 1, ind_2_11, ind_1_11, 20);
  static const int ind_2_12[] = {7,   10,  11,  41,  44,  53,  54,  152, 193, 195, 197, 200, 203, 206, 209,
                                 211, 213, 215, 217, 219, 223, 225, 228, 317, 326, 333, 344, 346, 363, 367,
                                 368, 380, 392, 473, 475, 479, 480, 487, 489, 493, 495, 503, 505, 522, 523};
  static const int ind_1_12[] = {0,  4,  6,  18, 19, 21, 22, 104, 1,  2,  3,  5,  7,  8,  9,
                                 10, 11, 12, 13, 14, 15, 16, 17,  20, 23, 24, 25, 26, 27, 28,
                                 29, 30, 31, 44, 45, 48, 49, 54,  55, 59, 60, 65, 66, 77, 78};
  initRow(M2, M1, 12, 0, ind_2_12, ind_1_12, 45);
  static const int ind_2_13[] = {8,   11,  51,  55,  96,  97,  195, 197, 198, 203,
                                 204, 206, 207, 217, 220, 226, 327, 331, 353, 377};
  static const int ind_1_13[] = {32, 36, 84, 85, 101, 102, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 86, 87, 88, 89};
  initRow(M2, M1, 13, 1, ind_2_13, ind_1_13, 20);
  static const int ind_2_14[] = {8,   11,  46,  49,  56,  153, 195, 197, 198, 203, 204, 206, 207, 213, 215,
                                 217, 219, 220, 221, 225, 226, 229, 323, 327, 330, 334, 351, 353, 370, 374,
                                 376, 381, 393, 481, 483, 487, 489, 493, 495, 497, 499, 508, 510, 526, 528};
  static const int ind_1_14[] = {0,  4,  18, 19, 21, 104, 1,  2,  3,  5,  6,  7,  8,  9,  10,
                                 11, 12, 13, 14, 15, 16,  17, 20, 22, 23, 24, 25, 26, 27, 28,
                                 29, 30, 31, 44, 45, 48,  49, 54, 55, 59, 60, 65, 66, 77, 78};
  initRow(M2, M1, 14, 0, ind_2_14, ind_1_14, 45);
  static const int ind_2_15[] = {9,   59,  63,  100, 104, 199, 202, 205, 208, 210,
                                 212, 214, 218, 222, 224, 227, 338, 352, 366, 383};
  static const int ind_1_15[] = {32, 84, 86, 101, 102, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 85, 87, 88, 89};
  initRow(M2, M1, 15, 1, ind_2_15, ind_1_15, 20);
  static const int ind_2_16[] = {10,  61,  101, 105, 200, 203, 206, 209, 211, 213,
                                 215, 219, 223, 225, 228, 340, 346, 354, 368, 385};
  static const int ind_1_16[] = {32, 84, 101, 102, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 85, 86, 87, 88, 89};
  initRow(M2, M1, 16, 1, ind_2_16, ind_1_16, 20);
  static const int ind_2_17[] = {11,  105, 203, 206, 207, 213, 215, 217, 219, 221,
                                 225, 226, 229, 343, 347, 353, 358, 376, 388, 517};
  static const int ind_1_17[] = {32, 101, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 102};
  initRow(M2, M1, 17, 1, ind_2_17, ind_1_17, 20);
  static const int ind_2_18[] = {12, 16, 18, 21, 25, 31, 32, 36, 38, 65, 66, 69, 79, 83, 89, 252, 257, 276, 277, 300};
  static const int ind_1_18[] = {46, 50, 52, 57, 62, 67, 68, 75, 76, 91, 92, 94, 98, 101, 102, 71, 72, 79, 80, 83};
  initRow(M2, M1, 18, 2, ind_2_18, ind_1_18, 20);
  static const int ind_2_19[] = {13,  32,  66,  80,  84,  90,  230, 234, 236, 240,
                                 251, 254, 258, 261, 267, 277, 279, 301, 397, 404};
  static const int ind_1_19[] = {46, 67, 91, 98, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 92, 94};
  initRow(M2, M1, 19, 2, ind_2_19, ind_1_19, 20);
  static const int ind_2_20[] = {13,  18,  23,  30,  32,  66,  69,  82,  88,  230,
                                 234, 236, 240, 251, 257, 258, 277, 285, 394, 420};
  static const int ind_1_20[] = {47, 53, 61, 64, 69, 93, 95, 101, 102, 51, 56, 58, 63, 70, 73, 74, 81, 82, 90, 97};
  initRow(M2, M1, 20, 3, ind_2_20, ind_1_20, 20);
  static const int ind_2_21[] = {14, 17,  20,  22,  27,  33,  34,  67,  81,  85,
                                 91, 255, 259, 262, 268, 278, 280, 302, 398, 405};
  static const int ind_1_21[] = {46, 50, 52, 57, 62, 67, 68, 91, 98, 101, 102, 71, 72, 75, 76, 79, 80, 83, 92, 94};
  initRow(M2, M1, 21, 2, ind_2_21, ind_1_21, 20);
  static const int ind_2_22[] = {14, 17, 19, 20, 22, 24, 27, 33, 34, 35, 67, 70, 83, 89, 243, 259, 278, 286, 395, 421};
  static const int ind_1_22[] = {47, 51, 53, 56, 58, 61, 63, 69, 70, 73, 93, 95, 101, 102, 64, 74, 81, 82, 90, 97};
  initRow(M2, M1, 22, 3, ind_2_22, ind_1_22, 20);
  static const int ind_2_23[] = {15,  28,  34,  86,  92,  231, 235, 237, 253, 256,
                                 260, 263, 269, 280, 282, 303, 398, 399, 406, 424};
  static const int ind_1_23[] = {46, 62, 67, 101, 102, 50, 52, 57, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 23, 2, ind_2_23, ind_1_23, 20);
  static const int ind_2_24[] = {15,  20,  26,  28,  34,  84,  90,  231, 235, 237,
                                 244, 253, 259, 260, 280, 288, 396, 398, 405, 422};
  static const int ind_1_24[] = {47, 53, 61, 63, 69, 101, 102, 51, 56, 58, 64, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 24, 3, ind_2_24, ind_1_24, 20);
  static const int ind_2_25[] = {16,  21,  36,  66,  68,  71,  80,  85,  91,  232,
                                 236, 238, 240, 241, 245, 252, 254, 261, 281, 289};
  static const int ind_1_25[] = {47, 53, 73, 90, 93, 95, 97, 101, 102, 51, 56, 58, 61, 63, 64, 69, 70, 74, 81, 82};
  initRow(M2, M1, 25, 3, ind_2_25, ind_1_25, 20);
  static const int ind_2_26[] = {17,  22,  28,  87,  93,  233, 237, 239, 242, 246,
                                 255, 256, 262, 263, 283, 292, 398, 401, 408, 424};
  static const int ind_1_26[] = {47, 53, 61, 101, 102, 51, 56, 58, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 26, 3, ind_2_26, ind_1_26, 20);
  static const int ind_2_27[] = {18,  23,  30,  69,  74,  90,  94,  236, 240, 257,
                                 258, 261, 265, 267, 271, 285, 287, 305, 404, 431};
  static const int ind_1_27[] = {46, 52, 62, 91, 94, 101, 102, 50, 57, 67, 68, 71, 72, 75, 76, 79, 80, 83, 92, 98};
  initRow(M2, M1, 27, 2, ind_2_27, ind_1_27, 20);
  static const int ind_2_28[] = {19,  22,  24,  27,  35,  37,  70,  75,  91,  95,
                                 243, 259, 262, 268, 272, 286, 288, 306, 405, 432};
  static const int ind_1_28[] = {46, 50, 52, 57, 67, 72, 91, 94, 101, 102, 62, 68, 71, 75, 76, 79, 80, 83, 92, 98};
  initRow(M2, M1, 28, 2, ind_2_28, ind_1_28, 20);
  static const int ind_2_29[] = {19,  22,  27,  33,  35,  70,  75,  81,  109, 115,
                                 243, 255, 262, 268, 278, 286, 302, 395, 398, 449};
  static const int ind_1_29[] = {32, 33, 34, 36, 38, 86, 87, 88, 101, 102, 35, 37, 39, 40, 41, 42, 43, 84, 85, 89};
  initRow(M2, M1, 29, 1, ind_2_29, ind_1_29, 20);
  static const int ind_2_30[] = {20,  26,  28,  92,  237, 244, 259, 260, 263, 266,
                                 269, 273, 288, 290, 307, 405, 406, 411, 434, 496};
  static const int ind_1_30[] = {46, 52, 57, 101, 50, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 30, 2, ind_2_30, ind_1_30, 20);
  static const int ind_2_31[] = {20,  24,  26,  28,  29,  37,  75,  90,  94,  237,
                                 244, 247, 259, 260, 266, 288, 294, 403, 405, 430};
  static const int ind_1_31[] = {47, 53, 56, 58, 61, 73, 95, 101, 102, 51, 63, 64, 69, 70, 74, 81, 82, 90, 93, 97};
  initRow(M2, M1, 31, 3, ind_2_31, ind_1_31, 20);
  static const int ind_2_32[] = {20,  28,  34,  110, 116, 237, 244, 256, 259, 263,
                                 269, 280, 288, 303, 396, 399, 405, 411, 424, 451};
  static const int ind_1_32[] = {32, 34, 36, 101, 102, 33, 35, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89};
  initRow(M2, M1, 32, 1, ind_2_32, ind_1_32, 20);
  static const int ind_2_33[] = {21,  36,  71,  93,  96,  238, 240, 241, 245, 261,
                                 264, 267, 270, 274, 289, 291, 308, 407, 412, 435};
  static const int ind_1_33[] = {46, 67, 91, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 92, 94, 98};
  initRow(M2, M1, 33, 2, ind_2_33, ind_1_33, 20);
  static const int ind_2_34[] = {21,  25,  30,  36,  38,  69,  71,  91,  95,  238,
                                 240, 241, 245, 248, 261, 267, 289, 295, 410, 431};
  static const int ind_1_34[] = {47, 53, 61, 69, 73, 90, 93, 101, 102, 51, 56, 58, 63, 64, 70, 74, 81, 82, 95, 97};
  initRow(M2, M1, 34, 3, ind_2_34, ind_1_34, 20);
  static const int ind_2_35[] = {22,  27,  28,  93,  96,  239, 242, 244, 246, 249,
                                 262, 263, 268, 269, 292, 297, 405, 408, 413, 434};
  static const int ind_1_35[] = {47, 53, 56, 101, 102, 51, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 35, 3, ind_2_35, ind_1_35, 20);
  static const int ind_2_36[] = {24,  28,  37,  75,  116, 120, 244, 247, 259, 263,
                                 269, 273, 288, 294, 307, 403, 406, 415, 434, 457};
  static const int ind_1_36[] = {32, 33, 38, 86, 101, 102, 34, 35, 36, 37, 39, 40, 41, 42, 43, 84, 85, 87, 88, 89};
  initRow(M2, M1, 36, 1, ind_2_36, ind_1_36, 20);
  static const int ind_2_37[] = {25,  30,  38,  96,  97,  241, 245, 248, 267, 270,
                                 271, 274, 275, 295, 296, 309, 410, 412, 416, 442};
  static const int ind_1_37[] = {46, 52, 67, 101, 102, 50, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 37, 2, ind_2_37, ind_1_37, 20);
  static const int ind_2_38[] = {25,  36,  38,  69,  117, 121, 241, 245, 248, 264,
                                 270, 274, 289, 295, 308, 407, 410, 416, 435, 458};
  static const int ind_1_38[] = {32, 36, 38, 84, 101, 102, 33, 34, 35, 37, 39, 40, 41, 42, 43, 85, 86, 87, 88, 89};
  initRow(M2, M1, 38, 1, ind_2_38, ind_1_38, 20);
  static const int ind_2_39[] = {25,  36,  38,  65,  68,  74,  241, 245, 248, 264, 270, 274, 281, 284, 289,
                                 293, 295, 298, 304, 308, 312, 402, 410, 414, 419, 433, 435, 450, 454, 456,
                                 463, 469, 532, 534, 537, 539, 542, 544, 545, 547, 550, 552, 560, 562, 577};
  static const int ind_1_39[] = {0,  4,  6,  18, 19, 21, 1,  2,  3,  5,  7,  8,  9,  10, 11,
                                 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29,
                                 30, 31, 44, 45, 48, 49, 54, 55, 59, 60, 65, 66, 77, 78, 104};
  initRow(M2, M1, 39, 0, ind_2_39, ind_1_39, 45);
  static const int ind_2_40[] = {27,  75,  96,  97,  242, 243, 244, 246, 247, 249,
                                 250, 268, 269, 272, 273, 297, 299, 413, 417, 441};
  static const int ind_1_40[] = {47, 90, 101, 102, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 93, 95, 97};
  initRow(M2, M1, 40, 3, ind_2_40, ind_1_40, 20);
  static const int ind_2_41[] = {31,  36,  38,  79,  80,  98,  102, 252, 257, 276,
                                 277, 281, 285, 289, 295, 300, 301, 310, 431, 450};
  static const int ind_1_41[] = {46, 57, 62, 91, 92, 101, 102, 50, 52, 67, 68, 71, 72, 75, 76, 79, 80, 83, 94, 98};
  initRow(M2, M1, 41, 2, ind_2_41, ind_1_41, 20);
  static const int ind_2_42[] = {32,  80,  254, 257, 258, 261, 265, 267, 271, 277,
                                 279, 285, 287, 301, 305, 420, 431, 448, 506, 511};
  static const int ind_1_42[] = {47, 93, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 95, 97, 101, 102};
  initRow(M2, M1, 42, 3, ind_2_42, ind_1_42, 20);
  static const int ind_2_43[] = {33,  81,  100, 104, 255, 259, 262, 268, 278, 280,
                                 283, 288, 292, 297, 302, 303, 311, 424, 434, 453};
  static const int ind_1_43[] = {46, 91, 101, 102, 50, 52, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 92, 94, 98};
  initRow(M2, M1, 43, 2, ind_2_43, ind_1_43, 20);
  static const int ind_2_44[] = {33,  35,  37,  81,  98,  102, 255, 259, 262, 268,
                                 272, 278, 280, 286, 288, 302, 306, 421, 432, 449};
  static const int ind_1_44[] = {47, 53, 61, 93, 101, 102, 51, 56, 58, 63, 64, 69, 70, 73, 74, 81, 82, 90, 95, 97};
  initRow(M2, M1, 44, 3, ind_2_44, ind_1_44, 20);
  static const int ind_2_45[] = {35,  37,  104, 262, 268, 272, 286, 288, 292, 294,
                                 297, 299, 306, 307, 313, 432, 434, 441, 459, 516};
  static const int ind_1_45[] = {46, 52, 101, 50, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 45, 2, ind_2_45, ind_1_45, 20);
  static const int ind_2_46[] = {36,  38,  104, 264, 267, 270, 271, 274, 275, 289,
                                 291, 295, 296, 308, 309, 431, 435, 442, 458, 516};
  static const int ind_1_46[] = {47, 53, 101, 51, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 46, 3, ind_2_46, ind_1_46, 20);
  static const int ind_2_47[] = {36,  80,  126, 128, 264, 270, 274, 281, 284, 289,
                                 293, 298, 304, 308, 312, 427, 435, 443, 456, 465};
  static const int ind_1_47[] = {32, 84, 101, 102, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 85, 86, 87, 88, 89};
  initRow(M2, M1, 47, 1, ind_2_47, ind_1_47, 20);
  static const int ind_2_48[] = {39,  43,  45,  48,  52,  58,  59,  63,  109, 115,
                                 336, 341, 350, 361, 362, 382, 472, 474, 482, 502};
  static const int ind_1_48[] = {46, 50, 52, 57, 62, 67, 68, 75, 101, 102, 71, 72, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 48, 2, ind_2_48, ind_1_48, 20);
  static const int ind_2_49[] = {40,  59,  110, 116, 314, 318, 320, 324, 335, 338,
                                 342, 345, 352, 362, 364, 383, 474, 476, 484, 504};
  static const int ind_1_49[] = {46, 67, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 49, 2, ind_2_49, ind_1_49, 20);
  static const int ind_2_50[] = {40,  45,  50,  57,  59,  108, 114, 314, 318, 320,
                                 324, 335, 341, 342, 362, 369, 470, 474, 482, 500};
  static const int ind_1_50[] = {47, 53, 61, 64, 69, 101, 102, 51, 56, 58, 63, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 50, 3, ind_2_50, ind_1_50, 20);
  static const int ind_2_51[] = {41,  44,  47,  49,  54,  60,  61,  111, 117, 339,
                                 343, 346, 353, 363, 365, 384, 475, 477, 485, 505};
  static const int ind_1_51[] = {46, 50, 52, 57, 62, 67, 68, 101, 102, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 51, 2, ind_2_51, ind_1_51, 20);
  static const int ind_2_52[] = {41,  44,  46,  47,  49,  51,  54,  60,  61,  62,
                                 109, 115, 327, 343, 363, 370, 471, 475, 483, 501};
  static const int ind_1_52[] = {47, 51, 53, 56, 58, 61, 63, 69, 70, 73, 101, 102, 64, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 52, 3, ind_2_52, ind_1_52, 20);
  static const int ind_2_53[] = {42,  55,  61,  112, 118, 315, 319, 321, 337, 340,
                                 344, 347, 354, 365, 367, 385, 477, 479, 487, 507};
  static const int ind_1_53[] = {46, 62, 67, 101, 102, 50, 52, 57, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 53, 2, ind_2_53, ind_1_53, 20);
  static const int ind_2_54[] = {42,  47,  53,  55,  61,  110, 116, 315, 319, 321,
                                 328, 337, 343, 344, 365, 372, 473, 477, 485, 503};
  static const int ind_1_54[] = {47, 53, 61, 63, 69, 101, 102, 51, 56, 58, 64, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 54, 3, ind_2_54, ind_1_54, 20);
  static const int ind_2_55[] = {43,  48,  63,  111, 117, 316, 320, 322, 324, 325,
                                 329, 336, 338, 345, 366, 373, 474, 478, 486, 504};
  static const int ind_1_55[] = {47, 53, 73, 101, 102, 51, 56, 58, 61, 63, 64, 69, 70, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 55, 3, ind_2_55, ind_1_55, 20);
  static const int ind_2_56[] = {44,  49,  55,  113, 119, 317, 321, 323, 326, 330,
                                 339, 340, 346, 347, 368, 376, 477, 480, 489, 507};
  static const int ind_1_56[] = {47, 53, 61, 101, 102, 51, 56, 58, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 56, 3, ind_2_56, ind_1_56, 20);
  static const int ind_2_57[] = {45,  50,  57,  116, 120, 320, 324, 341, 342, 345,
                                 349, 352, 356, 369, 371, 386, 482, 484, 490, 509};
  static const int ind_1_57[] = {46, 52, 62, 101, 102, 50, 57, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 57, 2, ind_2_57, ind_1_57, 20);
  static const int ind_2_58[] = {45,  57,  59,  130, 134, 320, 324, 338, 341, 345,
                                 352, 362, 369, 383, 470, 476, 482, 490, 504, 519};
  static const int ind_1_58[] = {32, 35, 36, 101, 102, 33, 34, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89};
  initRow(M2, M1, 58, 1, ind_2_58, ind_1_58, 20);
  static const int ind_2_59[] = {46,  49,  51,  54,  62,  64,  117, 121, 327, 343,
                                 346, 353, 357, 370, 372, 387, 483, 485, 491, 510};
  static const int ind_1_59[] = {46, 50, 52, 57, 67, 72, 101, 102, 62, 68, 71, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 59, 2, ind_2_59, ind_1_59, 20);
  static const int ind_2_60[] = {46,  49,  54,  60,  62,  131, 135, 327, 339, 346,
                                 353, 363, 370, 384, 471, 477, 483, 491, 505, 520};
  static const int ind_1_60[] = {32, 33, 34, 36, 38, 101, 102, 35, 37, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89};
  initRow(M2, M1, 60, 1, ind_2_60, ind_1_60, 20);
  static const int ind_2_61[] = {47,  53,  55,  118, 321, 328, 343, 344, 347, 351,
                                 354, 358, 372, 374, 388, 485, 487, 493, 512, 548};
  static const int ind_1_61[] = {46, 52, 57, 101, 50, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 61, 2, ind_2_61, ind_1_61, 20);
  static const int ind_2_62[] = {47,  51,  53,  55,  56,  64,  116, 120, 321, 328,
                                 331, 343, 344, 351, 372, 377, 481, 485, 491, 508};
  static const int ind_1_62[] = {47, 53, 56, 58, 61, 73, 101, 102, 51, 63, 64, 69, 70, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 62, 3, ind_2_62, ind_1_62, 20);
  static const int ind_2_63[] = {47,  55,  61,  132, 136, 321, 328, 340, 343, 347,
                                 354, 365, 372, 385, 473, 479, 485, 493, 507, 522};
  static const int ind_1_63[] = {32, 34, 36, 101, 102, 33, 35, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89};
  initRow(M2, M1, 63, 1, ind_2_63, ind_1_63, 20);
  static const int ind_2_64[] = {48,  63,  119, 122, 322, 324, 325, 329, 345, 348,
                                 352, 355, 359, 373, 375, 389, 486, 488, 494, 513};
  static const int ind_1_64[] = {46, 67, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 64, 2, ind_2_64, ind_1_64, 20);
  static const int ind_2_65[] = {48,  52,  57,  63,  117, 121, 322, 324, 325, 329,
                                 332, 345, 350, 352, 373, 378, 482, 486, 492, 509};
  static const int ind_1_65[] = {47, 53, 61, 69, 101, 102, 51, 56, 58, 63, 64, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 65, 3, ind_2_65, ind_1_65, 20);
  static const int ind_2_66[] = {49,  54,  55,  119, 122, 323, 326, 328, 330, 333,
                                 346, 347, 353, 354, 376, 380, 485, 489, 495, 512};
  static const int ind_1_66[] = {47, 53, 56, 101, 102, 51, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 66, 3, ind_2_66, ind_1_66, 20);
  static const int ind_2_67[] = {51,  55,  64,  136, 328, 331, 343, 347, 354, 358,
                                 372, 377, 388, 481, 487, 491, 497, 512, 526, 565};
  static const int ind_1_67[] = {32, 33, 38, 101, 34, 35, 36, 37, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 102};
  initRow(M2, M1, 67, 1, ind_2_67, ind_1_67, 20);
  static const int ind_2_68[] = {52,  57,  122, 325, 329, 332, 350, 352, 355, 356,
                                 359, 360, 378, 379, 390, 492, 494, 498, 515, 549};
  static const int ind_1_68[] = {46, 52, 101, 50, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 68, 2, ind_2_68, ind_1_68, 20);
  static const int ind_2_69[] = {52,  63,  137, 325, 329, 332, 348, 350, 355, 359,
                                 373, 378, 389, 482, 488, 492, 498, 513, 527, 566};
  static const int ind_1_69[] = {32, 36, 101, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 102};
  initRow(M2, M1, 69, 1, ind_2_69, ind_1_69, 20);
  static const int ind_2_70[] = {54,  122, 326, 327, 328, 330, 331, 333, 334, 353,
                                 354, 357, 358, 380, 381, 491, 495, 499, 514, 549};
  static const int ind_1_70[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 70, 3, ind_2_70, ind_1_70, 20);
  static const int ind_2_71[] = {58,  63,  124, 127, 336, 341, 350, 361, 362, 366,
                                 369, 373, 378, 382, 383, 391, 502, 504, 509, 521};
  static const int ind_1_71[] = {46, 57, 101, 102, 50, 52, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 71, 2, ind_2_71, ind_1_71, 20);
  static const int ind_2_72[] = {59,  123, 338, 341, 342, 345, 349, 352, 356, 362,
                                 364, 369, 371, 383, 386, 500, 504, 509, 519, 557};
  static const int ind_1_72[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 72, 3, ind_2_72, ind_1_72, 20);
  static const int ind_2_73[] = {60,  126, 128, 339, 343, 346, 353, 363, 365, 368,
                                 372, 376, 380, 384, 385, 392, 505, 507, 512, 523};
  static const int ind_1_73[] = {46, 101, 102, 50, 52, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 73, 2, ind_2_73, ind_1_73, 20);
  static const int ind_2_74[] = {60,  62,  64,  124, 127, 339, 343, 346, 353, 357,
                                 363, 365, 370, 372, 384, 387, 501, 505, 510, 520};
  static const int ind_1_74[] = {47, 53, 61, 101, 102, 51, 56, 58, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 74, 3, ind_2_74, ind_1_74, 20);
  static const int ind_2_75[] = {62,  64,  128, 346, 353, 357, 370, 372, 376, 377,
                                 380, 381, 387, 388, 393, 510, 512, 514, 528, 559};
  static const int ind_1_75[] = {46, 52, 101, 50, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 75, 2, ind_2_75, ind_1_75, 20);
  static const int ind_2_76[] = {63,  128, 348, 350, 352, 355, 356, 359, 360, 373,
                                 375, 378, 379, 389, 390, 509, 513, 515, 527, 559};
  static const int ind_1_76[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 76, 3, ind_2_76, ind_1_76, 20);
  static const int ind_2_77[] = {65,  68,  69,  71,  79,  80,  131, 135, 410, 425,
                                 431, 435, 442, 450, 452, 464, 534, 535, 540, 552};
  static const int ind_1_77[] = {46, 50, 52, 57, 67, 68, 101, 102, 62, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 77, 2, ind_2_77, ind_1_77, 20);
  static const int ind_2_78[] = {66,  80,  132, 136, 400, 404, 407, 412, 423, 427,
                                 433, 437, 443, 452, 454, 465, 535, 537, 542, 553};
  static const int ind_1_78[] = {46, 67, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 78, 2, ind_2_78, ind_1_78, 20);
  static const int ind_2_79[] = {66,  69,  74,  80,  130, 134, 400, 404, 407, 412,
                                 416, 423, 431, 433, 452, 458, 532, 535, 540, 550};
  static const int ind_1_79[] = {47, 53, 61, 69, 101, 102, 51, 56, 58, 63, 64, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 79, 3, ind_2_79, ind_1_79, 20);
  static const int ind_2_80[] = {67,  81,  133, 137, 401, 405, 408, 413, 424, 428,
                                 434, 438, 444, 453, 455, 466, 536, 538, 543, 554};
  static const int ind_1_80[] = {46, 67, 101, 102, 50, 52, 57, 62, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98};
  initRow(M2, M1, 80, 2, ind_2_80, ind_1_80, 20);
  static const int ind_2_81[] = {67,  70,  75,  81,  131, 135, 401, 405, 408, 413,
                                 417, 424, 432, 434, 453, 459, 533, 536, 541, 551};
  static const int ind_1_81[] = {47, 53, 61, 69, 101, 102, 51, 56, 58, 63, 64, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 81, 3, ind_2_81, ind_1_81, 20);
  static const int ind_2_82[] = {68,  71,  133, 137, 402, 407, 409, 412, 414, 418,
                                 425, 427, 435, 437, 456, 462, 535, 539, 544, 553};
  static const int ind_1_82[] = {47, 53, 101, 102, 51, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97};
  initRow(M2, M1, 82, 3, ind_2_82, ind_1_82, 20);
  static const int ind_2_83[] = {69,  74,  136, 407, 412, 416, 431, 433, 437, 440,
                                 443, 446, 458, 460, 467, 540, 542, 545, 555, 565};
  static const int ind_1_83[] = {46, 52, 101, 50, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 83, 2, ind_2_83, ind_1_83, 20);
  static const int ind_2_84[] = {69,  80,  143, 407, 412, 416, 427, 431, 437, 443,
                                 452, 458, 465, 532, 537, 540, 545, 553, 560, 571};
  static const int ind_1_84[] = {32, 36, 101, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 102};
  initRow(M2, M1, 84, 1, ind_2_84, ind_1_84, 20);
  static const int ind_2_85[] = {70,  75,  137, 408, 413, 417, 432, 434, 438, 441,
                                 444, 447, 459, 461, 468, 541, 543, 546, 556, 566};
  static const int ind_1_85[] = {46, 52, 101, 50, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 85, 2, ind_2_85, ind_1_85, 20);
  static const int ind_2_86[] = {70,  81,  408, 413, 417, 428, 432, 438, 444, 453,
                                 459, 466, 533, 538, 541, 546, 554, 561, 570, 572};
  static const int ind_1_86[] = {32, 36, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 101, 102};
  initRow(M2, M1, 86, 1, ind_2_86, ind_1_86, 20);
  static const int ind_2_87[] = {71,  137, 409, 410, 412, 414, 416, 418, 419, 435,
                                 437, 442, 443, 462, 463, 540, 544, 547, 555, 566};
  static const int ind_1_87[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 87, 3, ind_2_87, ind_1_87, 20);
  static const int ind_2_88[] = {72, 85, 91, 426};
  static const int ind_1_88[] = {96, 101, 102, 99};
  initRow(M2, M1, 88, 4, ind_2_88, ind_1_88, 4);
  static const int ind_2_89[] = {73, 87, 93, 429};
  static const int ind_1_89[] = {96, 101, 102, 99};
  initRow(M2, M1, 89, 4, ind_2_89, ind_1_89, 4);
  static const int ind_2_90[] = {76, 91, 95, 436};
  static const int ind_1_90[] = {96, 101, 102, 99};
  initRow(M2, M1, 90, 4, ind_2_90, ind_1_90, 4);
  static const int ind_2_91[] = {77, 93, 96, 439};
  static const int ind_1_91[] = {96, 101, 102, 99};
  initRow(M2, M1, 91, 4, ind_2_91, ind_1_91, 4);
  static const int ind_2_92[] = {78, 96, 97, 445};
  static const int ind_1_92[] = {96, 101, 102, 99};
  initRow(M2, M1, 92, 4, ind_2_92, ind_1_92, 4);
  static const int ind_2_93[] = {79,  140, 425, 431, 435, 442, 450, 452, 456, 458,
                                 462, 463, 464, 465, 469, 552, 553, 555, 562, 568};
  static const int ind_1_93[] = {46, 101, 50, 52, 57, 62, 67, 68, 71, 72, 75, 76, 79, 80, 83, 91, 92, 94, 98, 102};
  initRow(M2, M1, 93, 2, ind_2_93, ind_1_93, 20);
  static const int ind_2_94[] = {80,  139, 427, 431, 433, 437, 440, 443, 446, 452,
                                 454, 458, 460, 465, 467, 550, 553, 555, 560, 567};
  static const int ind_1_94[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 94, 3, ind_2_94, ind_1_94, 20);
  static const int ind_2_95[] = {81,  140, 428, 432, 434, 438, 441, 444, 447, 453,
                                 455, 459, 461, 466, 468, 551, 554, 556, 561, 568};
  static const int ind_1_95[] = {47, 101, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 81, 82, 90, 93, 95, 97, 102};
  initRow(M2, M1, 95, 3, ind_2_95, ind_1_95, 20);
  static const int ind_2_96[] = {82, 84, 90, 506};
  static const int ind_1_96[] = {100, 101, 102, 103};
  initRow(M2, M1, 96, 5, ind_2_96, ind_1_96, 4);
  static const int ind_2_97[] = {83, 85, 91, 98};
  static const int ind_1_97[] = {100, 101, 102, 103};
  initRow(M2, M1, 97, 5, ind_2_97, ind_1_97, 4);
  static const int ind_2_98[] = {83,  87,  90,  93,  96,  98,  99,  101, 103, 105,
                                 131, 132, 136, 140, 145, 147, 517, 524, 525, 530};
  static const int ind_1_98[] = {46, 50, 52, 57, 62, 67, 68, 71, 72, 75, 91, 92, 94, 98, 101, 102, 76, 79, 80, 83};
  initRow(M2, M1, 98, 2, ind_2_98, ind_1_98, 20);
  static const int ind_2_99[] = {83,  87,  89,  90,  93,  94,  96,  97,  98,  99,
                                 102, 103, 107, 129, 131, 135, 138, 144, 146, 524};
  static const int ind_1_99[] = {47, 51, 53, 56, 58, 61, 63, 64, 69, 70, 73, 74, 82, 90, 93, 95, 97, 101, 102, 81};
  initRow(M2, M1, 99, 3, ind_2_99, ind_1_99, 20);
  static const int ind_2_100[] = {84, 86, 92, 99};
  static const int ind_1_100[] = {100, 101, 102, 103};
  initRow(M2, M1, 100, 5, ind_2_100, ind_1_100, 4);
  static const int ind_2_101[] = {85, 87, 93, 100};
  static const int ind_1_101[] = {100, 101, 102, 103};
  initRow(M2, M1, 101, 5, ind_2_101, ind_1_101, 4);
  static const int ind_2_102[] = {88, 90, 94, 511};
  static const int ind_1_102[] = {100, 101, 102, 103};
  initRow(M2, M1, 102, 5, ind_2_102, ind_1_102, 4);
  static const int ind_2_103[] = {89, 91, 95, 102};
  static const int ind_1_103[] = {100, 101, 102, 103};
  initRow(M2, M1, 103, 5, ind_2_103, ind_1_103, 4);
  static const int ind_2_104[] = {89, 98, 109, 115};
  static const int ind_1_104[] = {96, 99, 101, 102};
  initRow(M2, M1, 104, 4, ind_2_104, ind_1_104, 4);
  static const int ind_2_105[] = {89,  93,  94,  96,  97,  102, 103, 105, 106, 107,
                                  135, 136, 147, 517, 518, 529, 531, 565, 568, 573};
  static const int ind_1_105[] = {46, 50, 52, 57, 62, 67, 68, 71, 72, 79, 91, 92, 101, 75, 76, 80, 83, 94, 98, 102};
  initRow(M2, M1, 105, 2, ind_2_105, ind_1_105, 20);
  static const int ind_2_106[] = {89,  93,  96,  97,  98,  101, 102, 105, 107, 129,
                                  132, 135, 140, 152, 153, 517, 524, 530, 565, 569};
  static const int ind_1_106[] = {32, 33, 34, 35, 36, 37, 38, 39, 42, 84, 85, 86, 88, 101, 102, 40, 41, 43, 87, 89};
  initRow(M2, M1, 106, 1, ind_2_106, ind_1_106, 20);
  static const int ind_2_107[] = {90, 92, 103, 496};
  static const int ind_1_107[] = {100, 101, 103, 102};
  initRow(M2, M1, 107, 5, ind_2_107, ind_1_107, 4);
  static const int ind_2_108[] = {90, 99, 110, 116};
  static const int ind_1_108[] = {96, 99, 101, 102};
  initRow(M2, M1, 108, 4, ind_2_108, ind_1_108, 4);
  static const int ind_2_109[] = {91, 93, 96, 104};
  static const int ind_1_109[] = {100, 101, 102, 103};
  initRow(M2, M1, 109, 5, ind_2_109, ind_1_109, 4);
  static const int ind_2_110[] = {91, 100, 111, 117};
  static const int ind_1_110[] = {96, 99, 101, 102};
  initRow(M2, M1, 110, 4, ind_2_110, ind_1_110, 4);
  static const int ind_2_111[] = {93, 101, 113, 119};
  static const int ind_1_111[] = {96, 99, 101, 102};
  initRow(M2, M1, 111, 4, ind_2_111, ind_1_111, 4);
  static const int ind_2_112[] = {94, 103, 116, 120};
  static const int ind_1_112[] = {96, 99, 101, 102};
  initRow(M2, M1, 112, 4, ind_2_112, ind_1_112, 4);
  static const int ind_2_113[] = {95, 96, 97, 516};
  static const int ind_1_113[] = {100, 101, 102, 103};
  initRow(M2, M1, 113, 5, ind_2_113, ind_1_113, 4);
  static const int ind_2_114[] = {95, 104, 117, 121};
  static const int ind_1_114[] = {96, 99, 101, 102};
  initRow(M2, M1, 114, 4, ind_2_114, ind_1_114, 4);
  static const int ind_2_115[] = {96, 105, 119, 122};
  static const int ind_1_115[] = {96, 99, 101, 102};
  initRow(M2, M1, 115, 4, ind_2_115, ind_1_115, 4);
  static const int ind_2_116[] = {97, 122, 517, 549};
  static const int ind_1_116[] = {96, 101, 99, 102};
  initRow(M2, M1, 116, 4, ind_2_116, ind_1_116, 4);
  static const int ind_2_117[] = {98,  101, 102, 103, 105, 106, 107, 138, 140, 149,
                                  517, 518, 524, 525, 529, 530, 531, 568, 569, 575};
  static const int ind_1_117[] = {47, 51, 53, 56, 58, 61, 73, 90, 93, 101, 63, 64, 69, 70, 74, 81, 82, 95, 97, 102};
  initRow(M2, M1, 117, 3, ind_2_117, ind_1_117, 20);
  static const int ind_2_118[] = {102, 104, 107, 516};
  static const int ind_1_118[] = {100, 101, 103, 102};
  initRow(M2, M1, 118, 5, ind_2_118, ind_1_118, 4);
  static const int ind_2_119[] = {102, 124, 127, 524};
  static const int ind_1_119[] = {96, 101, 102, 99};
  initRow(M2, M1, 119, 4, ind_2_119, ind_1_119, 4);
  static const int ind_2_120[] = {103, 125, 525, 558};
  static const int ind_1_120[] = {96, 101, 99, 102};
  initRow(M2, M1, 120, 4, ind_2_120, ind_1_120, 4);
  static const int ind_2_121[] = {108, 110, 116, 123};
  static const int ind_1_121[] = {100, 101, 102, 103};
  initRow(M2, M1, 121, 5, ind_2_121, ind_1_121, 4);
  static const int ind_2_122[] = {109, 111, 117, 124};
  static const int ind_1_122[] = {100, 101, 102, 103};
  initRow(M2, M1, 122, 5, ind_2_122, ind_1_122, 4);
  static const int ind_2_123[] = {109, 113, 115, 116, 119, 120, 122, 124, 125, 127,
                                  141, 152, 153, 549, 558, 563, 564, 570, 572, 574};
  static const int ind_1_123[] = {47, 51, 53, 56, 58, 61, 63, 69, 70, 73, 90, 101, 102, 64, 74, 81, 82, 93, 95, 97};
  initRow(M2, M1, 123, 3, ind_2_123, ind_1_123, 20);
  static const int ind_2_124[] = {110, 112, 118, 125};
  static const int ind_1_124[] = {100, 101, 102, 103};
  initRow(M2, M1, 124, 5, ind_2_124, ind_1_124, 4);
  static const int ind_2_125[] = {111, 113, 119, 126};
  static const int ind_1_125[] = {100, 101, 102, 103};
  initRow(M2, M1, 125, 5, ind_2_125, ind_1_125, 4);
  static const int ind_2_126[] = {114, 116, 120, 557};
  static const int ind_1_126[] = {100, 101, 102, 103};
  initRow(M2, M1, 126, 5, ind_2_126, ind_1_126, 4);
  static const int ind_2_127[] = {114, 123, 130, 134};
  static const int ind_1_127[] = {96, 99, 101, 102};
  initRow(M2, M1, 127, 4, ind_2_127, ind_1_127, 4);
  static const int ind_2_128[] = {115, 117, 121, 127};
  static const int ind_1_128[] = {100, 101, 102, 103};
  initRow(M2, M1, 128, 5, ind_2_128, ind_1_128, 4);
  static const int ind_2_129[] = {115, 124, 131, 135};
  static const int ind_1_129[] = {96, 99, 101, 102};
  initRow(M2, M1, 129, 4, ind_2_129, ind_1_129, 4);
  static const int ind_2_130[] = {116, 118, 548, 558};
  static const int ind_1_130[] = {100, 101, 102, 103};
  initRow(M2, M1, 130, 5, ind_2_130, ind_1_130, 4);
  static const int ind_2_131[] = {116, 125, 132, 136};
  static const int ind_1_131[] = {96, 99, 101, 102};
  initRow(M2, M1, 131, 4, ind_2_131, ind_1_131, 4);
  static const int ind_2_132[] = {117, 119, 122, 128};
  static const int ind_1_132[] = {100, 101, 102, 103};
  initRow(M2, M1, 132, 5, ind_2_132, ind_1_132, 4);
  static const int ind_2_133[] = {117, 126, 133, 137};
  static const int ind_1_133[] = {96, 99, 101, 102};
  initRow(M2, M1, 133, 4, ind_2_133, ind_1_133, 4);
  static const int ind_2_134[] = {120, 136, 558, 565};
  static const int ind_1_134[] = {96, 101, 99, 102};
  initRow(M2, M1, 134, 4, ind_2_134, ind_1_134, 4);
  static const int ind_2_135[] = {121, 122, 549, 559};
  static const int ind_1_135[] = {100, 101, 102, 103};
  initRow(M2, M1, 135, 5, ind_2_135, ind_1_135, 4);
  static const int ind_2_136[] = {121, 128, 137, 566};
  static const int ind_1_136[] = {96, 99, 101, 102};
  initRow(M2, M1, 136, 4, ind_2_136, ind_1_136, 4);
  static const int ind_2_137[] = {127, 128, 559, 564};
  static const int ind_1_137[] = {100, 101, 102, 103};
  initRow(M2, M1, 137, 5, ind_2_137, ind_1_137, 4);
  static const int ind_2_138[] = {127, 140, 563, 568};
  static const int ind_1_138[] = {96, 101, 99, 102};
  initRow(M2, M1, 138, 4, ind_2_138, ind_1_138, 4);
  static const int ind_2_139[] = {129, 130, 134, 138};
  static const int ind_1_139[] = {100, 101, 102, 103};
  initRow(M2, M1, 139, 5, ind_2_139, ind_1_139, 4);
  static const int ind_2_140[] = {130, 132, 136, 139};
  static const int ind_1_140[] = {100, 101, 102, 103};
  initRow(M2, M1, 140, 5, ind_2_140, ind_1_140, 4);
  static const int ind_2_141[] = {131, 133, 137, 140};
  static const int ind_1_141[] = {100, 101, 102, 103};
  initRow(M2, M1, 141, 5, ind_2_141, ind_1_141, 4);
  static const int ind_2_142[] = {134, 136, 565, 567};
  static const int ind_1_142[] = {100, 101, 102, 103};
  initRow(M2, M1, 142, 5, ind_2_142, ind_1_142, 4);
  static const int ind_2_143[] = {134, 139, 143, 571};
  static const int ind_1_143[] = {96, 99, 101, 102};
  initRow(M2, M1, 143, 4, ind_2_143, ind_1_143, 4);
  static const int ind_2_144[] = {135, 137, 566, 568};
  static const int ind_1_144[] = {100, 101, 102, 103};
  initRow(M2, M1, 144, 5, ind_2_144, ind_1_144, 4);
  static const int ind_2_145[] = {135, 140, 570, 572};
  static const int ind_1_145[] = {96, 99, 101, 102};
  initRow(M2, M1, 145, 4, ind_2_145, ind_1_145, 4);
  static const int ind_2_146[] = {138, 139, 567, 569};
  static const int ind_1_146[] = {100, 101, 102, 103};
  initRow(M2, M1, 146, 5, ind_2_146, ind_1_146, 4);
  static const int ind_2_147[] = {141, 143, 571, 574};
  static const int ind_1_147[] = {100, 101, 102, 103};
  initRow(M2, M1, 147, 5, ind_2_147, ind_1_147, 4);
  static const int ind_2_148[] = {142, 144, 146, 148};
  static const int ind_1_148[] = {100, 101, 102, 103};
  initRow(M2, M1, 148, 5, ind_2_148, ind_1_148, 4);
  static const int ind_2_149[] = {144, 145, 147, 149};
  static const int ind_1_149[] = {100, 101, 102, 103};
  initRow(M2, M1, 149, 5, ind_2_149, ind_1_149, 4);
  static const int ind_2_150[] = {146, 147, 573, 575};
  static const int ind_1_150[] = {100, 101, 102, 103};
  initRow(M2, M1, 150, 5, ind_2_150, ind_1_150, 4);
  static const int ind_2_151[] = {146, 149, 152, 153};
  static const int ind_1_151[] = {96, 99, 101, 102};
  initRow(M2, M1, 151, 4, ind_2_151, ind_1_151, 4);
  static const int ind_2_152[] = {148, 149, 150, 575};
  static const int ind_1_152[] = {100, 101, 103, 102};
  initRow(M2, M1, 152, 5, ind_2_152, ind_1_152, 4);
  static const int ind_2_153[] = {151, 152, 153, 576};
  static const int ind_1_153[] = {100, 101, 102, 103};
  initRow(M2, M1, 153, 5, ind_2_153, ind_1_153, 4);

  Eigen::PartialPivLU<Eigen::MatrixXd> lu(M2.block(0, 0, 154, 154));
  Eigen::MatrixXd M3 = lu.solve(M2.block(0, 154, 154, 424));

  // ! Corollary 2 demonstrates a solution duality arising from the template. By estimating one solution from the
  // ! polynomial equations, we can readily construct the other by using the following relationships:
  // !    Pa' = -Pb, Pb' = -Pa, vl' = vl. --> Rl' * vl' = -Rl * vl. --> vc' = -vc.
  // ! It is important to emphasize that the presence of these two solutions does not impact the inlier ratio.
  // ! Consequently, in practical scenarios, this determination should be conducted separately from RANSAC for velocity
  // ! averaging. For the purposes of this simulation, where only one cluster is utilized, we bypass this determination
  // ! by employing a safe_acos() function in the direction error to avoid considering the sign.

  double b = M3(150, 422);
  double c = M3(150, 423);
  double delta = b * b - 4.0 * c;
  double x6a = (-b + sqrt(delta)) / 2.0;
  // double x6b = (-b - sqrt(delta)) / 2.0;
  double x3a = -M3(151, 422) * x6a - M3(151, 423);
  // double x3b = -M3(151, 422) * x6b - M3(151, 423);
  double x4a = -M3(152, 422) * x6a - M3(152, 423);
  // double x4b = -M3(152, 422) * x6b - M3(152, 423);
  double x5a = -M3(153, 422) * x6a - M3(153, 423);
  // double x5b = -M3(153, 422) * x6b - M3(153, 423);
  double x2a = -M3(140, 423) / (x4a * x6a + x5a * x6a + M3(140, 416) * x4a + M3(140, 418) * x5a);
  // double x2b = -M3(140, 423) / (x4b * x6b + x5b * x6b + M3(140, 416) * x4b + M3(140, 418) * x5b);
  double x1a = -(M3(143, 416) * x2a * x4a + M3(143, 418) * x2a * x5a + M3(143, 422) * x6a + M3(143, 423)) / (x4a + x5a);
  // double x1b = -(M3(143, 416) * x2b * x4b + M3(143, 418) * x2b * x5b + M3(143, 422) * x6b + M3(143, 423)) / (x4b +
  // x5b);

  // The ordering of unknown is vy vz ya za zb yb
  //                            x1 x2 x3 x4 x5 x6
  vy_est_ = x1a;
  vz_est_ = x2a;
  ya_est_ = x3a;
  za_est_ = x4a;
  zb_est_ = x5a;
  yb_est_ = x6a;

  // avoid degenerate case
  success_ = (isnan(vy_est_) || isnan(vz_est_) || isnan(ya_est_) || isnan(za_est_) || isnan(zb_est_) || isnan(yb_est_))
                 ? false
                 : true;
  return success_;
}

bool PolyjamSolver::runSolver(const Measurements& measurements, double& duration, bool standardization) {
  if (measurements.first.size() < 5) {
    EVENTAIL_WARN("The input measurements shall be larger or equal to five events!");
    return false;
  }
  Measurements partial_measurements = measurements;
  partial_measurements.first.resize(5);
  reset();

  // compose the bearing vectors to suit the polyjam solver
  vector<Bearing> bv_vec;
  vector<double> ts_vec;
  RotationMatrix R_pca = RotationMatrix::Identity();
  if (standardization) R_pca = preRotation(partial_measurements);
  for (const auto& e : partial_measurements.first) {
    Vector3d event_homo(e.x, e.y, 1.0);
    Bearing bv = R_pca * axisAngleToRotationMatrix(partial_measurements.second, e.t) * K_inv_ * event_homo;
    bv.normalize();
    bv_vec.emplace_back(bv);
    ts_vec.push_back(e.t);
  }

  // execute the polyjam solver
  Timer clock;
  clock.start();
  if (!polyjamSolve(bv_vec, ts_vec)) return false;
  duration = clock.stop();

  // transform raw solutions into common geometric elements
  Pa_est_ = R_pca.transpose() * Position(-1.0, ya_est_, za_est_);
  Pb_est_ = R_pca.transpose() * Position(1.0, yb_est_, zb_est_);
  vl_est_ = Velocity(0.0, vy_est_, vz_est_);
  e1_est_ = Pb_est_ - Pa_est_;
  e2_est_ = Pb_est_.cross(Pa_est_);
  e3_est_ = e1_est_.cross(e2_est_);
  Rcl_orthogonal_est_.col(0) = e1_est_;
  Rcl_orthogonal_est_.col(1) = e2_est_;
  Rcl_orthogonal_est_.col(2) = e3_est_;
  norm_vc_est_ = Rcl_orthogonal_est_ * vl_est_;
  success_ = true;
  return true;
}

bool PolyjamSolver::calculateCovariance(const Measurements& measurements) { return true; }

FullPolyjamSolution PolyjamSolver::getSolution() const {
  FullPolyjamSolution solution;
  if (!success_) {
    EVENTAIL_WARN("Solver has not produced reliable solution yet. Output empty solution instead!");
    return solution;
  }
  solution.first.col(0) = Pa_est_;
  solution.first.col(1) = Pb_est_;
  solution.first.col(2) = vl_est_;
  solution.first.col(3) = norm_vc_est_;
  solution.second = cov_;
  return solution;
}

// * Note that the solver only generates a partial estimation of velocity. Therefore, the comparison made here pertains
// * to the estimated velocity, which is normalized and relative to the camera frame.
double PolyjamSolver::getDirectionError() const {
  if (!success_) {
    EVENTAIL_WARN("Solver has not produced reliable solution yet. Output -1 instead!");
    return -1.0;
  }
  Velocity norm_2dof_vc_gt;
  if (error_model_type_ == ErrorModel::MotionAndGeometry)
    norm_2dof_vc_gt = vc_gt_partial_;
  else  // ! default choice (ErrorModel::MotionOnly)
    norm_2dof_vc_gt = (RotationMatrix::Identity() - e1_est_ * e1_est_.transpose() / e1_est_.squaredNorm()) * vc_gt_;
  norm_2dof_vc_gt.normalize();
  double theta = safe_acos_deg(norm_2dof_vc_gt.dot(norm_vc_est_));
  return min(abs(theta), abs(180.0 - theta));  // ! to skip confirmation on solution duality
}

// ! Without resolving the ambiguity regarding the solution duality, it is advised against using the Euclidean Distance
// ! as the error function. In fact, during the simulation, there is a possibility of generating a landmark that falls
// ! outside the camera's field of view. This situation can pose challenges in accurately determining the correct one.
double PolyjamSolver::getEuclideanDistance() const {
  if (!success_) {
    EVENTAIL_WARN("Solver has not produced reliable solution yet. Output -1 instead!");
    return -1.0;
  }
  Velocity norm_2dof_vc_gt;
  if (error_model_type_ == ErrorModel::MotionAndGeometry)
    norm_2dof_vc_gt = vc_gt_partial_;
  else  // ! default choice (ErrorModel::MotionOnly)
    norm_2dof_vc_gt = (RotationMatrix::Identity() - e1_est_ * e1_est_.transpose() / e1_est_.squaredNorm()) * vc_gt_;
  norm_2dof_vc_gt.normalize();
  return (norm_2dof_vc_gt - norm_vc_est_).squaredNorm();
}

double PolyjamSolver::getError() const {
  if (error_metric_type_ == ErrorMetric::EuclideanDistance)
    return getEuclideanDistance();
  else  // ! default choice (ErrorMetric::DirectionError)
    return getDirectionError();
}

}  // namespace eventail_simulation
